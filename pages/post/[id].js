import React from "react";
import Post from "../../components/posts/post";
import { useRouter } from "next/router";
import Comment from "../../models/comment";

// import { useSession, getSession } from "next-auth/react";
import { appToastContext } from "../../context/state";
import Head from "next/head";
import PostId from "../../models/post";
import Reply from "../../models/replies";
import dbConnect from "../../middleware/mongodb";
// import post from "@/models/post";

// import useSWR from "swr";
// import fetcher from "middleware/fetch/fetch";

// import { MongoClient, ObjectID } from "mongodb";

function SinglePost(props) {
  const { userSession } = React.useContext(appToastContext);
  const router = useRouter();

  // console.log("post component");
  React.useEffect(() => {
    router.beforePopState(() => {
      let loaded = JSON.parse(localStorage.getItem("postLoaded"));
      loaded.popState = {
        timestamp: new Date().getTime(),
      };
      localStorage.setItem("postLoaded", JSON.stringify(loaded));
      // console.log(loaded);
      console.log("this is from the before pop state router");
      return true;
    });
    // return true;
  }, [router]);
  // React.useEffect(() => {
  //   window.history.replaceState(
  //     {},
  //     "",
  //     `/post/${props.post.title.split(" ").join("-")}`
  //   );
  //   // Always do navigations after the first render
  //   // router.push(`/post/${props.post.title}`, `/post/${props.post.title}`, {
  //   //   shallow: true,
  //   // });
  // }, []);
  return (
    <>
      <Head>
        <title>{props.post.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {userSession && <Post user={userSession.user} post={props.post} />}
      {!userSession && <Post post={props.post} />}
    </>
  );
}

// export async function getServerSideProps(context) {
//   // console.info("post component");
//   const postId = context.params.id;

//   const response = await fetch(`${server}/api/post/${postId}`);

//   const post = await response.json();

//   // console.log(post.data);

//   const comments = await post.comments;

//   return {
//     props: {
//       post: post.data,
//     },
//   };
// }

export async function getServerSideProps(context) {
  await dbConnect();

  const postId = context.params.id;
  const post = await PostId.findById(postId).populate({
    path: "comments",
    options: { sort: { created: -1 } },
  });
  //===== recursion function to find all replies =====
  async function deepIterator(comment) {
    let commentReplies = comment;
    for (const key in commentReplies) {
      if (commentReplies[key].replies !== undefined) {
        // console.log(commentReplies[key].replies);
        for (const com in commentReplies[key].replies) {
          // console.log(commentReplies[key].replies[com].toString());
          const commentReply = await Reply.findById(
            commentReplies[key].replies[com].toString()
          );
          // if (commentReply === null) {
          //   commentReplies[key].replies.spice(
          //     commentReplies[key].replies[com]
          //   );
          //   console.log(commentReplies[key].replies);
          // }
          if (commentReply !== null) {
            commentReplies[key].repliesFound.push(commentReply);
          }
          // commentReplies[key].repliesFound.push(commentReply);
        }
        if (commentReplies[key].repliesFound !== undefined) {
          // console.log("if is undefined is running");
          await deepIterator(commentReplies[key].repliesFound);
        }
      }
    }

    return commentReplies;
  }
  // console.log(post.comments);
  if (post.comments !== undefined) {
    const allReplies = await deepIterator(post.comments);
    // const newReplies = await allReplies.repliesFound;
    // console.log(allReplies);
    post.comments = await allReplies;
    // console.log(post.comments);
  }
  // const transformedPost = {
  //   ...post._doc,
  //   userProfile: {
  //     ...post.userProfile,
  //     id: post.userProfile.id.toString(),
  //   },
  //   _id: post._id.toString(),
  //   created: post.created.toDateString(),
  //   createdAt: post.createdAt.toDateString(),
  //   updatedAt: post.updatedAt.toDateString(),
  // };

  // const newPost = await transformedPost(post);
  // console.log(JSON.stringify(post));
  const tranfromToJson = async (post) => {
    return JSON.stringify(post);
  };
  const newData = await tranfromToJson(post);
  // console.log(newData);
  return {
    props: { post: JSON.parse(newData) },
  };
}

export default SinglePost;
