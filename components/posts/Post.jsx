import React from "react";
import CommentSection from "../comments/commentsection";
import { appToastContext } from "context/state";
import Head from "next/head";

import parse from "html-react-parser";
import EditPostModal from "./EditPostModal";
import Link from "next/link";
import Button, { useBtnState } from "../ui/globalUI/Button";
import ProfileColorAvatar from "../ui/globalUI/ProfileColorAvatar";
import PostSideMenu from "./PostSideMenu";
import LoginModal from "./LoginModal";

function Post(props) {
  // console.log(props.post);
  //===== context imports =====
  const { userSession, showToast } = React.useContext(appToastContext);
  //===== btn imports =====
  const [
    btnDisabled,
    setBtnDisabled,
    stopBtnAnimate,
    label,
    setLabel,
    btnColor,
    setBtnColor,
    btnVisibility,
    setBtnVisibility,
  ] = useBtnState(false, "", "", "");
  //===== state variables =====
  const [showPostModal, setShowPostModal] = React.useState(false);
  const [post, setPost] = React.useState(props.post);
  const [showLoginModal, setShowLoginModal] = React.useState(false);
  // React.useEffect(() => {
  //   const img = document.getElementById("img");
  //   // console.log(img.complete);
  //   img.onload = function () {
  //     console.log(img.complete);

  //   };
  // }, []);

  return (
    <>
      <Head>
        <title>{props.post.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>{" "}
      <main className="main-container mt-3 flex flex-row Psm:m-0 Psm:mt-3 Psm:flex-col-reverse">
        <article className="main-article-card overflow-hidden rounded-lg border border-indigo-900 border-opacity-50 bg-gray-100 dark:bg-gray-800 Psm:w-full Psm:rounded-none Psm:border-none">
          {/* //===== bookmark btn ===== */}

          <div className="blog-content">
            <div className="w-full">
              {post.image[0] ? (
                <img
                  id="img"
                  className="m-auto object-cover"
                  src={post.image[0].url}
                  alt="picture"
                />
              ) : (
                <img
                  id="img"
                  className="m-auto object-cover"
                  src={post.imageUrl}
                  alt="picture"
                />
              )}
            </div>

            <aside className="article-info flex justify-between p-4">
              <h2 className="flex items-center">
                <ProfileColorAvatar
                  type={"CIRCLE_AVATAR_POST"}
                  profile={post.userProfile}
                />

                <div className="flex flex-col">
                  <Link href={"/user/" + post.userProfile.id}>
                    <a className="clickable"> {post.userProfile.name} </a>
                  </Link>
                  <span className=" pt-1 text-center text-xs text-gray-600 dark:text-gray-400">
                    Posted on {new Date(post.created).toDateString()}
                  </span>
                </div>
              </h2>
              <p>
                <span className="ml-2 text-blue-600 dark:text-blue-300">
                  <a href="#commentSection">
                    {post.comments.length}{" "}
                    {post.comments.length <= 1 ? "Comment" : "Comments"}
                  </a>
                </span>
              </p>
            </aside>

            <section className="article p-4">
              <div className="article-title">
                <h1 className="pt-4 pb-4 text-5xl font-bold tracking-wide">
                  {post.title}
                </h1>
              </div>

              <div className="text-article text-base font-normal">
                <div id="postContent">{parse(post.body)}</div>
              </div>
            </section>

            <CommentSection
              user={props.user}
              post={post}
              setShowLoginModal={setShowLoginModal}
            />
          </div>
        </article>
        <PostSideMenu
          post={post}
          setShowPostModal={setShowPostModal}
          setShowLoginModal={setShowLoginModal}
        />

        {props.user && props.user.id === post.userProfile.id && (
          <>
            <EditPostModal
              showPostModal={showPostModal}
              setShowPostModal={setShowPostModal}
              post={post}
              setPost={setPost}
            />
          </>
        )}

        {!userSession && (
          <>
            <LoginModal
              showLoginModal={showLoginModal}
              setShowLoginModal={setShowLoginModal}
            />
          </>
        )}
      </main>
    </>
  );
}

export default Post;
